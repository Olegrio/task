'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _shortid = require('shortid');

var _shortid2 = _interopRequireDefault(_shortid);

var _Settings = require('./Settings');

var _Settings2 = _interopRequireDefault(_Settings);

var _ReactArrow = require('./ReactArrow');

var _ReactArrow2 = _interopRequireDefault(_ReactArrow);

var _ReactDots = require('./ReactDots');

var _ReactDots2 = _interopRequireDefault(_ReactDots);

require('./style.css');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var App = function (_React$Component) {
  _inherits(App, _React$Component);

  function App(props) {
    _classCallCheck(this, App);

    var _this = _possibleConstructorReturn(this, (App.__proto__ || Object.getPrototypeOf(App)).call(this, props));

    var _this$props = _this.props,
        children = _this$props.children,
        _this$props$autoScrol = _this$props.autoScroll,
        autoScroll = _this$props$autoScrol === undefined ? _Settings2.default.autoScroll : _this$props$autoScrol,
        _this$props$timer = _this$props.timer,
        timer = _this$props$timer === undefined ? _Settings2.default.timer : _this$props$timer,
        _this$props$initialSl = _this$props.initialSlide,
        initialSlide = _this$props$initialSl === undefined ? _Settings2.default.initialSlide : _this$props$initialSl,
        _this$props$slideToSh = _this$props.slideToShow,
        slideToShow = _this$props$slideToSh === undefined ? _Settings2.default.slideToShow : _this$props$slideToSh,
        _this$props$slideToSc = _this$props.slideToScroll,
        slideToScroll = _this$props$slideToSc === undefined ? _Settings2.default.slideToScroll : _this$props$slideToSc,
        _this$props$speed = _this$props.speed,
        speed = _this$props$speed === undefined ? _Settings2.default.speed : _this$props$speed,
        _this$props$hideDots = _this$props.hideDots,
        hideDots = _this$props$hideDots === undefined ? _Settings2.default.hideDots : _this$props$hideDots;


    _this.state = {
      children: children,
      autoScroll: autoScroll,
      timer: timer,
      currentSlide: initialSlide,
      slideToShow: slideToShow,
      slideToScroll: slideToScroll,
      gutter: null,
      speed: speed,
      hideDots: hideDots,
      wait: false,
      nbrSlides: null,
      carouselWidth: null,
      slideWidth: null
    };

    _this.handleClickPrev = _this.handleClickPrev.bind(_this);
    _this.handleClickNext = _this.handleClickNext.bind(_this);
    _this.handleClickDot = _this.handleClickDot.bind(_this);
    return _this;
  }

  _createClass(App, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _state = this.state,
          children = _state.children,
          slideToShow = _state.slideToShow;


      var nbrSlides = children.length;
      var carouselWidth = 100 * nbrSlides;
      var slideWidth = nbrSlides * slideToShow;
      var gutter = slideToShow === 1 ? 0 : (this.props.gutter || _Settings2.default.gutter) / 100 * slideWidth * 100 / carouselWidth;

      this.setState({
        gutter: gutter,
        nbrSlides: nbrSlides,
        carouselWidth: carouselWidth,
        slideWidth: slideWidth
      });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _state2 = this.state,
          autoScroll = _state2.autoScroll,
          timer = _state2.timer;


      if (autoScroll) {
        setInterval(this.handleClickNext, timer);
      }
    }
  }, {
    key: 'handleClickDot',
    value: function handleClickDot(nbr) {
      this.setState(function (prev) {
        if (nbr + prev.slideToShow >= prev.nbrSlides) {
          nbr = prev.nbrSlides - prev.slideToShow;
        }
        return { currentSlide: nbr };
      });
    }
  }, {
    key: 'handleClickPrev',
    value: function handleClickPrev() {
      if (!this.state.wait) {
        this.setState(function (prev) {
          var currentSlide = prev.currentSlide - prev.slideToScroll < 0 ? 0 : prev.currentSlide - prev.slideToScroll;

          return { currentSlide: currentSlide };
        });

        this.prev();
      }
    }
  }, {
    key: 'handleClickNext',
    value: function handleClickNext() {
      if (!this.state.wait) {
        this.setState(function (prev) {
          var currentSlide = prev.currentSlide + prev.slideToScroll < prev.nbrSlides ? prev.currentSlide + prev.slideToScroll : prev.nbrSlides - 1;

          if (currentSlide + prev.slideToShow >= prev.nbrSlides) {
            currentSlide = prev.nbrSlides - prev.slideToShow;
          }

          return { currentSlide: currentSlide };
        });

        this.next();
      }
    }
  }, {
    key: 'transition',
    value: function transition(before, after) {
      var _this2 = this;

      this.setState({ wait: true });

      var _props = this.props,
          beforeSlide = _props.beforeSlide,
          afterSlide = _props.afterSlide;


      var func = function func(_) {
        _this2.setState({ wait: false });

        if (typeof after === 'function') {
          after();
        }

        if (typeof afterSlide === 'function') {
          afterSlide();
        }

        _this2.slideContainer.removeEventListener('transitionend', func, false);
      };

      if (typeof beforeSlide === 'function') {
        beforeSlide();
      }

      if (typeof before === 'function') {
        before();
      }

      this.slideContainer.addEventListener('transitionend', func, false);
    }
  }, {
    key: 'prev',
    value: function prev() {
      var _props2 = this.props,
          beforePrev = _props2.beforePrev,
          afterPrev = _props2.afterPrev;


      this.transition(beforePrev, afterPrev);
    }
  }, {
    key: 'next',
    value: function next() {
      var _props3 = this.props,
          beforeNext = _props3.beforeNext,
          afterNext = _props3.afterNext;


      this.transition(beforeNext, afterNext);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _state3 = this.state,
          currentSlide = _state3.currentSlide,
          slideWidth = _state3.slideWidth,
          slideToShow = _state3.slideToShow,
          carouselWidth = _state3.carouselWidth,
          gutter = _state3.gutter,
          children = _state3.children,
          nbrSlides = _state3.nbrSlides,
          speed = _state3.speed,
          hideDots = _state3.hideDots;


      var tile = 100 / slideWidth;
      var tileWidth = tile - gutter + gutter / slideToShow;

      var CarouselStyle = {
        transitionDuration: speed + 'ms',
        width: carouselWidth + '%',
        transform: 'translateX(-' + (tile + gutter / slideToShow) * currentSlide + '%)'
      };

      var SlideStyle = {
        width: tileWidth + '%',
        marginRight: gutter + '%'
      };

      var Dot = hideDots ? null : _react2.default.createElement(_ReactDots2.default, {
        nbrSlides: nbrSlides,
        currentSlide: currentSlide,
        handleClickDot: this.handleClickDot
      });

      var items = [];
      children.map(function (item) {
        return items.push(_react2.default.createElement(
          'li',
          { className: 'Slide', style: SlideStyle, key: _shortid2.default.generate() },
          item
        ));
      });

      return _react2.default.createElement(
        'div',
        { className: 'Carousel' },
        _react2.default.createElement(_ReactArrow2.default, {
          handleClick: this.handleClickPrev,
          fade: !currentSlide
        }),
        _react2.default.createElement(_ReactArrow2.default, {
          handleClick: this.handleClickNext,
          fade: currentSlide + slideToShow >= nbrSlides
        }),
        _react2.default.createElement(
          'div',
          { className: 'Slider' },
          _react2.default.createElement(
            'ul',
            { style: CarouselStyle, ref: function ref(el) {
                _this3.slideContainer = el;
              } },
            items
          )
        ),
        Dot
      );
    }
  }]);

  return App;
}(_react2.default.Component);

exports.default = App;